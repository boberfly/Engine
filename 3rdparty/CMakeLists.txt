# Backup compiler flags
#SET(BACKUP_CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
#SET(BACKUP_CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")

# Enable optimization, disable runtime checks, etc, for all 3rd party libraries.
IF(MSVC)
	# Remove optimization flags that exist, add new ones.
	STRING (REGEX REPLACE "/O.*" "" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
	
	# Disable runtime checks.
	STRING (REGEX REPLACE "/RTC(su|[1su])" "" CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
	STRING (REGEX REPLACE "/RTC(su|[1su])" "" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")

	# Enable optimization, inline suitable functions.
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /O2 /Ob2")
	SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /O2 /Ob2")
	STRING (REGEX REPLACE "/Ob1" "/Ob2" CMAKE_C_FLAGS_OPTIMIZED "${CMAKE_C_FLAGS_OPTIMIZED}")
	STRING (REGEX REPLACE "/Ob1" "/Ob2" CMAKE_CXX_FLAGS_OPTIMIZED "${CMAKE_CXX_FLAGS_OPTIMIZED}")

ELSE()
	SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}" -O3)
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O3")
ENDIF()

# Setup assimp.
SET(BUILD_SHARED_LIBS OFF CACHE BOOL "")
SET(ASSIMP_BUILD_TESTS OFF CACHE BOOL "")
SET(ASSIMP_INSTALL_PDB OFF CACHE BOOL "")
SET(ASSIMP_BUILD_ASSIMP_TOOLS OFF CACHE BOOL "")

SET(ASSIMP_BUILD_ALL_IMPORTERS_BY_DEFAULT FALSE CACHE BOOL "")
SET(ASSIMP_BUILD_OBJ_IMPORTER ON CACHE BOOL "")
SET(ASSIMP_BUILD_FBX_IMPORTER ON CACHE BOOL "")
SET(ASSIMP_BUILD_GLTF_IMPORTER ON CACHE BOOL "")

ADD_SUBDIRECTORY("assimp")
ADD_3RDPARTY_LIBRARY(assimp "assimp")
ADD_3RDPARTY_LIBRARY(IrrXML "assimp")
ADD_3RDPARTY_LIBRARY(zlibstatic "assimp")


# Setup jsoncpp.
SET(JSONCPP_WITH_TESTS OFF CACHE BOOL "jsoncpp test")
SET(JSONCPP_WITH_POST_BUILD_UNITTEST OFF CACHE BOOL "jsoncpp post-build unittests")
SET(JSONCPP_WITH_PKGCONFIG_SUPPORT OFF CACHE BOOL "jsoncpp pkgconfig support")
SET(JSONCPP_WITH_CMAKE_PACKAGE OFF CACHE BOOL "jsoncpp cmake package")

ADD_SUBDIRECTORY("jsoncpp")
ADD_3RDPARTY_LIBRARY(jsoncpp_lib_static "jsoncpp")

# Setup fcpp.
ADD_SUBDIRECTORY("fcpp")
ADD_3RDPARTY_LIBRARY(fcpp "fcpp")

# Setup SDL2.
SET(SDL_SHARED ON)
SET(SDL_STATIC OFF)

# Setup Remotery.
ADD_SUBDIRECTORY("Remotery")
ADD_3RDPARTY_LIBRARY(Remotery "Remotery")

ADD_SUBDIRECTORY("SDL-mirror")
ADD_3RDPARTY_LIBRARY(SDL2main "SDL2")

IF(SDL_SHARED)
	ADD_3RDPARTY_LIBRARY(SDL2 "SDL2")
ENDIF()

IF(SDL_STATIC)
	ADD_3RDPARTY_LIBRARY(SDL2-static "SDL2")
ENDIF()

# Setup squish.
ADD_SUBDIRECTORY("squish")
ADD_3RDPARTY_LIBRARY(squish "squish")

# Setup etlsf.
ADD_SUBDIRECTORY("etlsf")
ADD_3RDPARTY_LIBRARY(etlsf "etlsf")

# Setup tlsf.
ADD_SUBDIRECTORY("tlsf")
ADD_3RDPARTY_LIBRARY(tlsf "tlsf")

# Setup sc.
ADD_SUBDIRECTORY("sc")
ADD_3RDPARTY_LIBRARY(sc "sc")


# Restore compiler flags.
#SET(CMAKE_C_FLAGS_DEBUG "${BACKUP_CMAKE_C_FLAGS_DEBUG}")
#SET(CMAKE_CXX_FLAGS_DEBUG "${BACKUP_CMAKE_CXX_FLAGS_DEBUG}")